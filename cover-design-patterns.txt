criacional
	1 - abstract factory: todas as classe implementam a mesma interface
	2 - builder: é uma interface que "builda" partes de um objeto complexo.Se sabe o que buildar, pode ser que a interface seja uma class abstrata
	3 - factory method: depende de abstrações, não classes concretas. Você pode "subclassear" para implementar diferentes modos de criar o objeto. Para casos simples, essa classe abstrata poderia ser apenas uma interface
	4 - multition: ter uma lista das instancias nomeadas que estão sendo usadas, como a singleton mas com n instancias
	5 - pool: usa um conjunto de objetos inicializados que ficam "prontos" para uso ao inves de alocar e destruir sob demanda. é Bem usado quando a taxa de inicialização de objetos é alta como conexões de db, conexões de socket, theads e obbjetos gráficos..
	6 - prototpye: evitar o custo de criar objetos de modo padrão e então, mas ao invés disso, criar um prototype e cloná-lo
	7 - simple factory: difere do static factory porque não é estatico. Pode-se ter multiplos factories parametrizados de forma diferente. Sempre melhor que o static factory
	8 - singleton: manter uma unica instancia do objeto. Ele lidará com todas as chamadas.
	9 - static factory: diferente do abstract factory ele usa apenas um método estático para criar qualquer tipo de objeto.